{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","reportWebVitals.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","setcategory","cat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACRC,mBAAS,oBADD,mBACrCC,EADqC,KACzBC,EADyB,KAgB5C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAY,SAACS,GAAD,OAAWP,GAAX,mBAAyBO,OACrCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBe,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE4EC,UAAUH,GAFtF,sBAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAI1Ca,QAAQC,IAAIR,GAdO,kBAgBZA,GAhBY,4CAAH,sDCEPS,EAAc,SAAC,GAAmB,EAAlBN,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAgBtC,OATAC,qBAAU,WACN1B,EAAQC,GAAU0B,MAAK,SAACb,GACpBW,EAAS,CACLjB,KAAMM,EACNS,SAAS,SAGlB,CAACtB,IAEGuB,EDb0BI,CAAa3B,GAAjCa,EAHwB,EAG7BN,KAAae,EAHgB,EAGhBA,QAGrB,OACI,qCACI,6BAAKtB,IAGDsB,EAAU,aAAe,eAE7B,qBAAKJ,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAAAC,GACP,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEhBxCiB,EAAe,WAAM,MAII1C,mBAAS,CAAC,kBAJd,mBAIvB2C,EAJuB,KAIXC,EAJW,KAM9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAa7C,YAAa6C,IAC1B,uBAIA,6BAEQD,EAAWpB,KAAI,SAACsB,GAAD,OAAS,cAAC,EAAD,CAAmB/B,SAAU+B,GAAfA,YCR3CC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.bdd9dbb7.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({ setCategory }) => {\r\n    const [inputValue, setInputValue] = useState('Search something')\r\n\r\n    const handleInputChanged = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategory((cats) => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChanged}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=7G8MFTrmHIXOSSK0KE6zBKP1f0b8aP8Q&q=${encodeURI(category)}&limit=10`\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    console.log(gifs);\r\n\r\n    return gifs;\r\n\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data:images, loading } = useFetchGifs(category)\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {\r\n                loading ? 'loading...' : 'data fetched'\r\n            }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => {\r\n                        return <GifGridItem key={img.id} {...img} />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then((images) => {\r\n            setState({\r\n                data: images,\r\n                loading: false\r\n            })\r\n        })\r\n    }, [category]);\r\n\r\n    return state; // {data:[], loading:true}\r\n\r\n};","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['Lorem1', 'lorem2', 'lorem3'];\r\n\r\n    const [categories, setcategory] = useState(['Devil may cry'])\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategory={setcategory} />\r\n            <hr></hr>\r\n\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((cat) => <GifGrid key={cat} category={cat} />)\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}